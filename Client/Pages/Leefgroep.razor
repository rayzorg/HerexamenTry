
@page "/Leefgroep"


@using HerexamenTry.Shared
@using HerexamenTry.Shared.DTO
@inject HttpClient Http
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin")]









@if (jongeren == null)
{
    <p><em>Loading...</em></p>
}
else
{

    @if (jongeren.Length > 10)
    {
        <button @onclick="() =>Open()" type="button" class="btn btn-info" style="float: right;" disabled>Toevoegen</button>

    }
    else if (jongeren.Length <= 10)
    {
        <button @onclick="() =>Open()" type="button" class="btn btn-info" style="float: right;">Toevoegen</button>

    }
    <table class="table">
        <thead>
            <tr>
                <th>Voornaam</th>
                <th>Achternaam</th>
                <th>gender</th>
                <th>Geboortedatum</th>
                <th>Email</th>
                <th>Username</th>

                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in jongeren)
            {
                <tr>
                    <td>@forecast.Firstname</td>
                    <td>@forecast.Lastname</td>
                    <td>@forecast.Gender</td>
                    <td>@forecast.Date</td>
                    <td>@forecast.Email</td>
                    <td>@forecast.Username</td>

                    <td>
                        <button type="button" class="btn btn-danger " @onclick="@(() => DeleteUser(@forecast.Email))">Verwijderen</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">

    <div class="modal-dialog modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Jongere toevoegen</h5>
            </div>
            <div class="modal-body">

                <EditForm Model="jongere" OnValidSubmit="Add">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label>Username</label>
                        <InputText class="form-control" @bind-Value="jongere.Username" />
                        <ValidationMessage For="() => jongere.Username" />
                    </div>
                    <div class="form-group">
                        <label>Voornaam</label>
                        <InputText class="form-control" @bind-Value="jongere.Firstname" />
                        <ValidationMessage For="() => jongere.Firstname" />
                    </div>
                    <div class="form-group">
                        <label>Achternaam</label>
                        <InputText class="form-control" @bind-Value="jongere.Lastname" />
                        <ValidationMessage For="() => jongere.Lastname" />
                    </div>
                    <div class="form-group">
                        <label>Geboortedatum</label>
                        <InputDate class="form-control" @bind-Value="jongere.Date" />
                        <ValidationMessage For="() => jongere.Date" />
                    </div>
                    <div class="form-group">
                        <label>Gender</label>
                        <InputSelect class="form-control" @bind-Value="jongere.Gender">
                            <option value="">Kies</option>
                            <option value="Man">Man</option>
                            <option value="Female">Female</option>
                        </InputSelect>
                        <ValidationMessage For="() => jongere.Gender" />
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="jongere.Email" />
                        <ValidationMessage For="() => jongere.Email" />
                    </div>
                    <div class="form-group">
                        <label>Wachtwoord</label>
                        <InputText type="password" class="form-control" @bind-Value="jongere.Password" />
                        <ValidationMessage For="() => jongere.Password" />
                    </div>

                    <button class="btn btn-primary" type="submit" data-dismiss="modal">Toevoegen</button>

                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Sluiten</button>
                </EditForm>
            </div>

        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    public Jongere[] jongeren;

    protected override async Task OnInitializedAsync()
    {
        // base.OnInitialized();
        jongeren = await Http.GetFromJsonAsync<Jongere[]>("https://localhost:44357/api/begeleider/all");
        //await InvokeAsync(StateHasChanged);
    }





    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
    public async Task DeleteUser(string email)
    {


        //   var response = await Http.PostAsJsonAsync<JongereDTO>("https://localhost:44357/api/begeleider/delete", jongere);
        // jongeren = await Http.GetFromJsonAsync<JongereDTO[]>("https://localhost:44357/api/begeleider");

        // var response = await Http.PostAsJsonAsync<JongereDTO>("https://localhost:44357/api/begeleider/delete", jongere);
        //Console.WriteLine(response);
        foreach (var item in jongeren)
        {
            if (item.Email.Equals(email))
            {
                Console.WriteLine(item.Email);
                // jongeren = await Http.GetFromJsonAsync<JongereDTO[]>("https://localhost:44357/api/begeleider");
                var response = await Http.DeleteAsync("https://localhost:44357/api/begeleider/delete/" + item.Email);

            }

        }

        jongeren = await Http.GetFromJsonAsync<Jongere[]>("https://localhost:44357/api/begeleider/all");
        Console.WriteLine("in lijst:" + jongeren.Length);
    }


    private JongereDTO jongere = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        jongere.Date = DateTime.Now;
    }

    private async Task Add()
    {
        var response = await Http.PostAsJsonAsync<JongereDTO>("https://localhost:44357/api/begeleider/create", jongere);
        Console.WriteLine(response);
        if (response.IsSuccessStatusCode != false)
        {
            jongeren = await Http.GetFromJsonAsync<Jongere[]>("https://localhost:44357/api/begeleider/all");
            Close();

        }

        // NavigationManager.NavigateTo("Leefgroep");




    }
}
